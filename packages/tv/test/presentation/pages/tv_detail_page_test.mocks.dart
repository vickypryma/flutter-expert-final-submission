// Mocks generated by Mockito 5.3.0 from annotations
// in tv/test/presentation/pages/tv_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tv/domain/entities/tv_detail.dart' as _i11;
import 'package:tv/domain/usecases/get_tv_detail.dart' as _i2;
import 'package:tv/domain/usecases/get_tv_recommendations.dart' as _i3;
import 'package:tv/domain/usecases/get_tv_watchlist_status.dart' as _i5;
import 'package:tv/domain/usecases/remove_tv_watchlist.dart' as _i7;
import 'package:tv/domain/usecases/save_tv_watchlist.dart' as _i6;
import 'package:tv/presentation/blocs/tv_detail/tv_detail_cubit.dart' as _i4;
import 'package:tv/presentation/blocs/tv_watchlist_status/tv_watchlist_status_cubit.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetTvDetail_0 extends _i1.SmartFake implements _i2.GetTvDetail {
  _FakeGetTvDetail_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetTvRecommendations_1 extends _i1.SmartFake
    implements _i3.GetTvRecommendations {
  _FakeGetTvRecommendations_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvDetailState_2 extends _i1.SmartFake implements _i4.TvDetailState {
  _FakeTvDetailState_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetTvWatchlistStatus_3 extends _i1.SmartFake
    implements _i5.GetTvWatchlistStatus {
  _FakeGetTvWatchlistStatus_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSaveTvWatchlist_4 extends _i1.SmartFake
    implements _i6.SaveTvWatchlist {
  _FakeSaveTvWatchlist_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeRemoveTvWatchlist_5 extends _i1.SmartFake
    implements _i7.RemoveTvWatchlist {
  _FakeRemoveTvWatchlist_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvWatchlistStatusState_6 extends _i1.SmartFake
    implements _i8.TvWatchlistStatusState {
  _FakeTvWatchlistStatusState_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [TvDetailCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvDetailCubit extends _i1.Mock implements _i4.TvDetailCubit {
  MockTvDetailCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetTvDetail get getTvDetail =>
      (super.noSuchMethod(Invocation.getter(#getTvDetail),
              returnValue:
                  _FakeGetTvDetail_0(this, Invocation.getter(#getTvDetail)))
          as _i2.GetTvDetail);
  @override
  _i3.GetTvRecommendations get getTvRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getTvRecommendations),
              returnValue: _FakeGetTvRecommendations_1(
                  this, Invocation.getter(#getTvRecommendations)))
          as _i3.GetTvRecommendations);
  @override
  _i4.TvDetailState get state => (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeTvDetailState_2(this, Invocation.getter(#state)))
      as _i4.TvDetailState);
  @override
  _i9.Stream<_i4.TvDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i9.Stream<_i4.TvDetailState>.empty())
          as _i9.Stream<_i4.TvDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i9.Future<void> fetchTvDetail(int? id) => (super.noSuchMethod(
      Invocation.method(#fetchTvDetail, [id]),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  void emit(_i4.TvDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i10.Change<_i4.TvDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
}

/// A class which mocks [TvWatchlistStatusCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvWatchlistStatusCubit extends _i1.Mock
    implements _i8.TvWatchlistStatusCubit {
  MockTvWatchlistStatusCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.GetTvWatchlistStatus get getTvWatchListStatus =>
      (super.noSuchMethod(Invocation.getter(#getTvWatchListStatus),
              returnValue: _FakeGetTvWatchlistStatus_3(
                  this, Invocation.getter(#getTvWatchListStatus)))
          as _i5.GetTvWatchlistStatus);
  @override
  _i6.SaveTvWatchlist get saveTvWatchlist => (super.noSuchMethod(
          Invocation.getter(#saveTvWatchlist),
          returnValue:
              _FakeSaveTvWatchlist_4(this, Invocation.getter(#saveTvWatchlist)))
      as _i6.SaveTvWatchlist);
  @override
  _i7.RemoveTvWatchlist get removeTvWatchlist =>
      (super.noSuchMethod(Invocation.getter(#removeTvWatchlist),
              returnValue: _FakeRemoveTvWatchlist_5(
                  this, Invocation.getter(#removeTvWatchlist)))
          as _i7.RemoveTvWatchlist);
  @override
  _i8.TvWatchlistStatusState get state => (super.noSuchMethod(
          Invocation.getter(#state),
          returnValue:
              _FakeTvWatchlistStatusState_6(this, Invocation.getter(#state)))
      as _i8.TvWatchlistStatusState);
  @override
  _i9.Stream<_i8.TvWatchlistStatusState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i9.Stream<_i8.TvWatchlistStatusState>.empty())
          as _i9.Stream<_i8.TvWatchlistStatusState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i9.Future<void> loadWatchlistStatus(int? id) => (super.noSuchMethod(
      Invocation.method(#loadWatchlistStatus, [id]),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> addWatchlist(_i11.TvDetail? tv) => (super.noSuchMethod(
      Invocation.method(#addWatchlist, [tv]),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> removeFromWatchlist(_i11.TvDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#removeFromWatchlist, [tv]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  void emit(_i8.TvWatchlistStatusState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i10.Change<_i8.TvWatchlistStatusState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
}
