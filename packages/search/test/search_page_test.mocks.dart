// Mocks generated by Mockito 5.3.0 from annotations
// in search/test/search_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie/domain/usecases/search_movies.dart' as _i2;
import 'package:search/blocs/search_cubit.dart' as _i4;
import 'package:tv/domain/usecases/search_tv.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSearchMovies_0 extends _i1.SmartFake implements _i2.SearchMovies {
  _FakeSearchMovies_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSearchTv_1 extends _i1.SmartFake implements _i3.SearchTv {
  _FakeSearchTv_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSearchState_2 extends _i1.SmartFake implements _i4.SearchState {
  _FakeSearchState_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [SearchCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchCubit extends _i1.Mock implements _i4.SearchCubit {
  MockSearchCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SearchMovies get searchMovies =>
      (super.noSuchMethod(Invocation.getter(#searchMovies),
              returnValue:
                  _FakeSearchMovies_0(this, Invocation.getter(#searchMovies)))
          as _i2.SearchMovies);
  @override
  _i3.SearchTv get searchTv => (super.noSuchMethod(Invocation.getter(#searchTv),
          returnValue: _FakeSearchTv_1(this, Invocation.getter(#searchTv)))
      as _i3.SearchTv);
  @override
  set timer(_i5.Timer? _timer) =>
      super.noSuchMethod(Invocation.setter(#timer, _timer),
          returnValueForMissingStub: null);
  @override
  _i4.SearchState get state => (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeSearchState_2(this, Invocation.getter(#state)))
      as _i4.SearchState);
  @override
  _i5.Stream<_i4.SearchState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i5.Stream<_i4.SearchState>.empty())
          as _i5.Stream<_i4.SearchState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  dynamic changeType(bool? isMovie) =>
      super.noSuchMethod(Invocation.method(#changeType, [isMovie]));
  @override
  void onQueryChange(String? query) =>
      super.noSuchMethod(Invocation.method(#onQueryChange, [query]),
          returnValueForMissingStub: null);
  @override
  void emit(_i4.SearchState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i6.Change<_i4.SearchState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
}
